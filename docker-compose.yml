version: "3.7"
services:
  application-backend:
    profiles: [ "all", "app" ]
    build: application-backend
    ports:
      - 8080:8080

  application-frontend:
    profiles: [ "all", "app" ]
    image: nginx
    env_file:
      - .env
    volumes:
      - ./application-frontend/default.conf.template:/etc/nginx/templates/default.conf.template:rw,cached
      - ./application-frontend/index.html:/usr/share/nginx/html/index.html
    environment:
      API_KEY: "$API_KEY"
    ports:
      - 4200:80
    links:
      - grafana

  prometheus:
    profiles: [ "all", "monitoring" ]
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    profiles: [ "all", "monitoring" ]
    image: grafana/grafana:7.4.5-ubuntu
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - 3000:3000
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    links:
      - prometheus

  renderer:
    profiles: [ "all", "monitoring" ]
    image: grafana/grafana-image-renderer:latest
    ports:
      - 8081:8081

  node-exporter:
    profiles: [ "all", "monitoring" ]
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100

  sonarqube:
    profiles: [ "all", "testing" ]
    image: sonarqube:community
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./sonar/sonarqube_data:/opt/sonarqube/data
      - ./sonar/sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonar/sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"

  db:
    profiles: [ "all", "testing" ]
    image: postgres:12
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - ./sonar/postgresql:/var/lib/postgresql
      - ./sonar/postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:
